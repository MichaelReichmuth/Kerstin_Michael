scale_y_continuous(breaks = c(0.00, 0.2, 0.4, 0.6, 0.8, 1.00),
limits = c(0.00, 1.00)) +
theme_classic()
sim_results %>%
group_by(ICC, npergroup, ngroup) %>%
mutate(power_mean = mean(power)) %>%
ungroup() %>%
ggplot(aes(ICC, power_mean, color = fnpergroup, shape = fnpergroup, linetype = fngroup)) +
geom_hline(yintercept = 0.8, linetype = 5,
color = "#333333", size = 0.5) +
geom_point(size = 1) +
geom_line(size = 0.5) +
labs(title = "Random Intercept Model (Level-1 Predictor) Estimated Power by ICC",
x = "ICC",
y = "Estimated Power",
color = "n per group",
shape = "n per group",
linetype = "number of groups") +
xlim(0,1) +
scale_y_continuous(breaks = c(0.00, 0.2, 0.4, 0.6, 0.8, 1.00),
limits = c(0.00, 1.00)) +
theme_classic()
sim_results %>%
group_by(ICC, npergroup, ngroup) %>%
mutate(power_mean = mean(power)) %>%
ungroup() %>%
ggplot(aes(ICC, power_mean, color = fnpergroup, shape = fnpergroup, linetype = fngroup)) +
geom_hline(yintercept = 0.8, linetype = 5,
color = "#333333", size = 0.5) +
geom_point(size = 1.2) +
geom_line(size = 0.5) +
labs(title = "Random Intercept Model (Level-1 Predictor) Estimated Power by ICC",
x = "ICC",
y = "Estimated Power",
color = "n per group",
shape = "n per group",
linetype = "number of groups") +
xlim(0,1) +
scale_y_continuous(breaks = c(0.00, 0.2, 0.4, 0.6, 0.8, 1.00),
limits = c(0.00, 1.00)) +
theme_classic()
# backup
sim_backup <- sim_results
write.csv(sim_results, "sim_1.1.csv", row.names = FALSE)
sim_results <- read.csv("sim_1.1.csv")
dgp <- function(npergroup, ngroup, intercept, beta,
U0j_s_err, err_s_err){ # values required
N <- npergroup * ngroup
temp_x <- rnorm(n = ngroup, mean = 100, sd = 15)
x_mean <- mean(temp_x)
x <- temp_x - x_mean
err <- rnorm(n = N, mean = 0, sd = err_s_err)
U0j <- rnorm(n = ngroup, mean = 0, sd = U0j_s_err) # random intercept
y <- intercept + beta * x + U0j + err
dat <- data.frame(x = x, y = y, group = 1:ngroup)
return(dat)
dgp <- function(npergroup, ngroup, intercept, beta,
U0j_s_err, err_s_err){ # values required
N <- npergroup * ngroup
temp_x <- rnorm(n = ngroup, mean = 100, sd = 15)
x_mean <- mean(temp_x)
x <- temp_x - x_mean
err <- rnorm(n = N, mean = 0, sd = err_s_err)
U0j <- rnorm(n = ngroup, mean = 0, sd = U0j_s_err) # random intercept
y <- intercept + beta * x + U0j + err
dat <- data.frame(x = x, y = y, group = 1:ngroup)
return(dat)
}
dgp(npergroup = 10,
ngroup = 10,
intercept = 500,
beta = 0.25,
U0j_s_err = 100,
err_s_err = 10)
dgp(npergroup = 10,
ngroup = 10,
intercept = 500,
beta = 0.25,
U0j_s_err = 100,
err_s_err = 10)
dgp <- function(npergroup, ngroup, intercept, beta,
U0j_s_err, err_s_err){ # values required
N <- npergroup * ngroup
temp_x <- rnorm(n = ngroup, mean = 100, sd = 15)
x_mean <- mean(temp_x)
x <- temp_x - x_mean
err <- rnorm(n = N, mean = 0, sd = err_s_err)
U0j <- rnorm(n = ngroup, mean = 0, sd = U0j_s_err) # random intercept
y <- intercept + beta * x + U0j + err
dat <- data.frame(x = x, y = y, group = 1:ngroup)
return(dat)
}
dgp(npergroup = 10,
ngroup = 10,
intercept = 500,
beta = 0.25,
U0j_s_err = 100,
err_s_err = 10)
dgp <- function(npergroup, ngroup, intercept, beta,
U0j_s_err, err_s_err){ # values required
temp_x <- rnorm(n = ngroup, mean = 100, sd = 15)
x <- temp_x - x_mean
err <- rnorm(n = N, mean = 0, sd = err_s_err)
U0j <- rnorm(n = ngroup, mean = 0, sd = U0j_s_err) # random intercept
y <- intercept + beta * x + U0j + err
dat <- data.frame(x = x, y = y, group = 1:ngroup)
return(dat)
}
dgp(npergroup = 10,
ngroup = 10,
intercept = 500,
beta = 0.25,
U0j_s_err = 100,
err_s_err = 10)
# plot
dgp(npergroup = 20,
ngroup = 30,
intercept = 500,
beta = 0.25,
U0j_s_err = 1,
err_s_err = 10) %>%
ggplot(aes(x,y, color = group)) +
geom_point(size = 0.5) +
geom_smooth(method = "lm", se = FALSE,
size = 0.7, color = "red") +
geom_smooth(method = "lm", se = FALSE,
size = 0.3, lty = 2, aes(group = group)) +
guides(color = "none") +
ylim(200,800) +
xlim(-60,60) +
theme_minimal()
dgp <- function(npergroup, ngroup, intercept, beta,
U0j_s_err, err_s_err){ # values required
temp_x <- rnorm(n = ngroup, mean = 100, sd = 15)
x <- temp_x - x_mean
err <- rnorm(n = N, mean = 0, sd = err_s_err)
U0j <- rnorm(n = ngroup, mean = 0, sd = U0j_s_err) # random intercept
y <- intercept + beta * x + U0j + err
dat <- data.frame(x = x, y = y, group = 1:ngroup)
return(dat)
}
dgp <- function(npergroup, ngroup, intercept, beta,
U0j_s_err, err_s_err){ # values required
temp_x <- rnorm(n = ngroup, mean = 100, sd = 15)
x <- temp_x - x_mean
err <- rnorm(n = N, mean = 0, sd = err_s_err)
U0j <- rnorm(n = ngroup, mean = 0, sd = U0j_s_err) # random intercept
y <- intercept + beta * x + U0j + err
dat <- data.frame(x = x, y = y, group = 1:ngroup)
return(dat)
}
install.packages('rmarkdown')
install.packages('tinytex')
tinytex::install_tinytex() # install TinyTeX
Then, simply run the following in your console:
read.csv(velorouten.csv)
setwd("~/GitHub/Kerstin_Michael/Test_M")
read.csv(velorouten.csv)
read.csv("velorouten.csv")
velorouten <- read.csv("velorouten.csv")
View(velorouten)
strassen_wege <- read.csv("strassen_wege")
strassen_wege <- read.csv("strassen_wege.csv")
strassen_wege <- read.csv("strassen_wege.csv", row.names = NULL)
View(strassen_wege)
strassen_wege <- read.csv("strassen_wege.csv", sep = ";", stringsAsFactors = FALSE)
View(strassen_wege)
velorouten <- read.csv("velorouten.csv", sep = ";", stringsAsFactors = FALSE)
View(velorouten)
View(velorouten)
View(strassen_wege)
library(sf)
install.packages("sf")
library(sf)
library(ggplot2)
library(dplyr)
```{r} echo = false
velorouten <- st_as_sf(velorouten, wkt = "Geo.Shape", crs = 4326)
velorouten <- read.csv("velorouten.csv", sep = ";", stringsAsFactors = FALSE)
velorouten <- st_as_sf(velorouten, wkt = "Geo.Shape", crs = 4326)
velorouten <- st_as_sf(velorouten, coords = c("Geo.Point"), crs = 4326)
velorouten <- read.csv("velorouten.csv", sep = ";", stringsAsFactors = FALSE)
velorouten <- st_as_sf(velorouten, coords = c("Geo.Point"), crs = 4326)
View(velorouten)
velorouten$Geo.Shape[1]
View(strassen_wege)
install.packages("jsonlite")
library(jsonlite)
json_string <- velorouten$Geo.Shape[1]
# Convert JSON string to a list
geo_data <- fromJSON(json_string)
# Convert coordinates to a data frame
coords <- as.data.frame(do.call(rbind, geo_data$coordinates))
colnames(coords) <- c("lon", "lat")
# Convert coordinates to a data frame
coords <- as.data.frame(do.call(rbind, geo_data$coordinates))
# Convert JSON string to a list
geo_data <- fromJSON(json_string)
# Convert coordinates to a data frame
coords <- as.data.frame(do.call(rbind, geo_data$coordinates))
colnames(coords) <- c("lon", "lat")
# Convert coordinates to a data frame
coords <- as.data.frame(do.call(rbind, geo_data$coordinates))
json_str <- velorouten$Geo.Shape[1]
# Parse the JSON string into a list
geo_data <- fromJSON(json_str)
# Extract the coordinates
coords <- geo_data$coordinates
# Convert to a data frame
df <- data.frame(lon = sapply(coords, function(x) x[1]),
lat = sapply(coords, function(x) x[2]))
# Plot using ggplot2
ggplot(df, aes(x = lon, y = lat)) +
geom_path() +
theme_minimal() +
labs(title = "Street Path", x = "Longitude", y = "Latitude")
json_str <- velorouten$Geo.Shape[1]
# Parse the JSON string into a list
geo_data <- fromJSON(json_str)
View(geo_data)
velorouten2 <- st_read("velorouten.geojson")
View(velorouten2)
velorouten <- st_read("velorouten.geojson")
names(velorouten)
plot(velorouten)
velorouten <- st_read("velorouten.geojson")
velorouten <- st_read("velorouten.geojson")
Loading two different dataframes.
strassen_wege <- st_read("strassen_wege.geojson")
plot(strassen_wege)
plot(strassen_wege$kategorie)
ggplot() +
geom_sf(data = velorouten, color = "blue", size = 1) +    # velorouten in blue
geom_sf(data = strassen_wege, color = "red", size = 1) +    # strassen_wege in red
theme_minimal() +
labs(title = "Comparison of Velorouten and Strassen Wege") +
theme(legend.position = "none")  # Hide legend for better clarity
ggplot() +
geom_sf(data = velorouten, color = "blue", size = 1) +    # velorouten in blue
geom_sf(data = strassen_wege, color = "red", size = 1) +    # strassen_wege in red
theme_minimal() +
labs(title = "Comparison of Velorouten and Strassen Wege") +
theme(legend.position = "none")  # Hide legend for better clarity
ggplot() +
geom_sf(data = velorouten, color = "blue", size = 1, alpha = 0.5) +    # velorouten in blue
geom_sf(data = strassen_wege, color = "red", size = 1, aplha = 0.5) +    # strassen_wege in red
theme_minimal() +
labs(title = "Comparison of Velorouten and Strassen Wege") +
theme(legend.position = "none")  # Hide legend for better clarity
ggplot() +
geom_sf(data = velorouten, color = "blue", size = 1, alpha = 0.5) +    # velorouten in blue
geom_sf(data = strassen_wege, color = "red", size = 1, alpha = 0.5) +    # strassen_wege in red
theme_minimal() +
labs(title = "Comparison of Velorouten and Strassen Wege") +
theme(legend.position = "none")  # Hide legend for better clarity
ggplot() +
geom_sf(data = velorouten, color = "blue", size = 1, alpha = 0.5) +    # velorouten in blue
geom_sf(data = strassen_wege, color = "grey", size = 1, alpha = 0.5) +    # strassen_wege in red
theme_minimal() +
labs(title = "Comparison of Velorouten and Strassen Wege") +
theme(legend.position = "none")  # Hide legend for better clarity
ggplot() +
geom_sf(data = strassen_wege, color = "grey", size = 1, alpha = 0.5) +
geom_sf(data = velorouten, color = "blue", size = 1, alpha = 0.5) +
theme_minimal() +
labs(title = "Comparison of Velorouten and Strassen Wege") +
theme(legend.position = "none")  # Hide legend for better clarity
ggplot() +
geom_sf(data = strassen_wege, color = "grey", size = 1, alpha = 0.5) +
geom_sf(data = velorouten, color = "blue", size = 1, alpha = 0.5) +
theme_minimal() +
labs(title = "Comparison of Velorouten and Strassen Wege") +
theme_minimal() +
theme(legend.position = "none")  # Hide legend for better clarity
ggplot() +
geom_sf(data = strassen_wege, color = "grey", size = 1, alpha = 0.5) +
geom_sf(data = velorouten, color = "blue", size = 1, alpha = 0.5) +
theme_minimal() +
labs(title = "Comparison of Velorouten and Strassen Wege") +
theme_minimal()
View(strassen_wege)
strassen_wege_hvs <- strassen_wege %>% filter(snh == "HVS")
ggplot() +
geom_sf(data = strassen_wege_hvs, color = "grey", size = 1, alpha = 0.5) +
geom_sf(data = velorouten, color = "blue", size = 1, alpha = 0.5) +
theme_minimal() +
labs(title = "Comparison of Velorouten and Strassen Wege") +
theme_minimal() +
theme(legend.position = "none")  # Hide legend for better clarity
ggplot() +
geom_sf(data = strassen_wege_hvs, color = "red", size = 1, alpha = 0.5) +
geom_sf(data = velorouten, color = "blue", size = 1, alpha = 0.5) +
theme_minimal() +
labs(title = "Comparison of Velorouten and Strassen Wege") +
theme_minimal() +
theme(legend.position = "none")  # Hide legend for better clarity
ggplot() +
geom_sf(data = strassen_wege, color = "grey", size = 1, alpha = 0.5) +
geom_sf(data = strassen_wege_hvs, color = "red", size = 1, alpha = 0.5) +
geom_sf(data = velorouten, color = "blue", size = 1, alpha = 0.5) +
theme_minimal() +
labs(title = "Comparison of Velorouten and Strassen Wege") +
theme_minimal() +
theme(legend.position = "none")  # Hide legend for better clarity
ggplot() +
geom_sf(data = strassen_wege, color = "grey", size = 1, alpha = 0.5) +
geom_sf(data = strassen_wege_hvs, color = "red", size = 1, alpha = 0.5) +
geom_sf(data = velorouten, color = "green", size = 1, alpha = 0.5) +
theme_minimal() +
labs(title = "Comparison of Velorouten and Strassen Wege") +
theme_minimal() +
theme(legend.position = "none")  # Hide legend for better clarity
ggplot() +
geom_sf(data = strassen_wege, color = "grey", size = 1, alpha = 0.5) +
geom_sf(data = strassen_wege_hvs, color = "red", size = 1, alpha = 0.3) +
geom_sf(data = velorouten, color = "green", size = 1, alpha = 0.3) +
theme_minimal() +
labs(title = "Comparison of Velorouten and Strassen Wege") +
theme_minimal() +
theme(legend.position = "none")  # Hide legend for better clarity
ggplot() +
geom_sf(data = strassen_wege, color = "grey", size = 1, alpha = 0.5) +
geom_sf(data = strassen_wege_hvs, color = "red", size = 1, alpha = 0.3) +
geom_sf(data = velorouten, color = "green", size = 1, alpha = 0.3) +
theme_minimal() +
labs(title = "Comparison of Velorouten and Strassen Wege") +
theme(legend.position = "none")  # Hide legend for better clarity
unfaelle <- st_read("unfaelle.geojson")
ggplot() +
geom_sf(data = strassen_wege, color = "grey", size = 1, alpha = 0.5) +
geom_sf(data = strassen_wege_hvs, color = "red", size = 1, alpha = 0.3) +
geom_sf(data = velorouten, color = "green", size = 1, alpha = 0.3) +
geom_sf(data = unfalle, color = "red", size = 1) +
theme_minimal() +
labs(title = "Comparison of Velorouten and Strassen Wege") +
theme(legend.position = "none")  # Hide legend for better clarity
ggplot() +
geom_sf(data = strassen_wege, color = "grey", size = 1, alpha = 0.5) +
geom_sf(data = strassen_wege_hvs, color = "red", size = 1, alpha = 0.3) +
geom_sf(data = velorouten, color = "green", size = 1, alpha = 0.3) +
geom_sf(data = unfaelle, color = "red", size = 1) +
theme_minimal() +
labs(title = "Comparison of Velorouten and Strassen Wege") +
theme(legend.position = "none")  # Hide legend for better clarity
unfaelle_velo <- unfaelle %>% filter(fahrrd_bet == TRUE)
ggplot() +
geom_sf(data = strassen_wege, color = "grey", size = 1, alpha = 0.5) +
geom_sf(data = strassen_wege_hvs, color = "red", size = 1, alpha = 0.3) +
geom_sf(data = velorouten, color = "green", size = 1, alpha = 0.3) +
geom_sf(data = unfaelle_velo, color = "red", size = 1) +
theme_minimal() +
labs(title = "Comparison of Velorouten and Strassen Wege") +
theme(legend.position = "none")  # Hide legend for better clarity
unfaelle_velo <- unfaelle %>% filter(fahrrd_bet == TRUE)
unfaelle_velo <- unfaelle %>% filter(fahrrd_bet = TRUE)
unfaelle_velo <- unfaelle %>% filter(fahrrd_bet)
unfaelle_velo <- unfaelle %>% filter(fahrrd_bet == TRUE)
unfaelle_velo <- unfaelle %>% filter(fahrrd_bet == "true")
ggplot() +
geom_sf(data = strassen_wege, color = "grey", size = 1, alpha = 0.5) +
geom_sf(data = strassen_wege_hvs, color = "red", size = 1, alpha = 0.3) +
geom_sf(data = velorouten, color = "green", size = 1, alpha = 0.3) +
geom_sf(data = unfaelle_velo, color = "red", size = 1) +
theme_minimal() +
labs(title = "Comparison of Velorouten and Strassen Wege") +
theme(legend.position = "none")  # Hide legend for better clarity
ggplot() +
geom_sf(data = strassen_wege, color = "grey", size = 1, alpha = 0.5) +
geom_sf(data = strassen_wege_hvs, color = "red", size = 1, alpha = 0.3) +
geom_sf(data = velorouten, color = "green", size = 1, alpha = 0.3) +
geom_sf(data = unfaelle_velo, color = "red", size = 0.1) +
theme_minimal() +
labs(title = "Comparison of Velorouten and Strassen Wege") +
theme(legend.position = "none")  # Hide legend for better clarity
ggplot() +
geom_sf(data = strassen_wege, color = "grey", size = 1, alpha = 0.5) +
geom_sf(data = strassen_wege_hvs, color = "blue", size = 1, alpha = 0.3) +
geom_sf(data = velorouten, color = "green", size = 1, alpha = 0.3) +
geom_sf(data = unfaelle_velo, color = "red", size = 0.1) +
theme_minimal() +
labs(title = "Comparison of Velorouten and Strassen Wege") +
theme(legend.position = "none")  # Hide legend for better clarity
table(unfaelle_velo$jahr)
unfaelle_velo <- unfaelle %>% filter(fahrrd_bet == "true" & jahr == "2023")
ggplot() +
geom_sf(data = strassen_wege, color = "grey", size = 1, alpha = 0.5) +
geom_sf(data = strassen_wege_hvs, color = "blue", size = 1, alpha = 0.3) +
geom_sf(data = velorouten, color = "green", size = 1, alpha = 0.3) +
geom_sf(data = unfaelle_velo_23, color = "red", size = 0.1) +
theme_minimal() +
labs(title = "Comparison of Velorouten and Strassen Wege") +
theme(legend.position = "none")  # Hide legend for better clarity
unfaelle_velo_23 <- unfaelle %>% filter(fahrrd_bet == "true" & jahr == "2023")
ggplot() +
geom_sf(data = strassen_wege, color = "grey", size = 1, alpha = 0.5) +
geom_sf(data = strassen_wege_hvs, color = "blue", size = 1, alpha = 0.3) +
geom_sf(data = velorouten, color = "green", size = 1, alpha = 0.3) +
geom_sf(data = unfaelle_velo_23, color = "red", size = 0.1) +
theme_minimal() +
labs(title = "Comparison of Velorouten and Strassen Wege") +
theme(legend.position = "none")  # Hide legend for better clarity
ggplot() +
geom_sf(data = strassen_wege, color = "grey", size = 1, alpha = 0.5) +
geom_sf(data = strassen_wege_hvs, color = "blue", size = 1, alpha = 0.3) +
geom_sf(data = velorouten, color = "green", size = 1, alpha = 0.3) +
geom_sf(data = unfaelle_velo_23, color = "red", size = 0.1) +
theme_minimal() +
labs(title = "Comparison of Velorouten and Strassen Wege") +
theme(legend.position = "none")  # Hide legend for better clarity
ggplot() +
geom_sf(data = strassen_wege, color = "grey", size = 1, alpha = 0.5) +
geom_sf(data = strassen_wege_hvs, color = "blue", size = 1, alpha = 0.3) +
geom_sf(data = velorouten, color = "green", size = 1, alpha = 0.3) +
geom_sf(data = unfaelle_velo_23, color = "red", size = 0.1) +
theme_minimal() +
labs(title = "Comparison of Veloroutes and Mainstreet (2023)") +
theme(legend.position = "none")
ggplot() +
geom_sf(data = strassen_wege, color = "grey", size = 1, alpha = 0.5) +
geom_sf(data = strassen_wege_hvs, color = "blue", size = 1, alpha = 0.3) +
geom_sf(data = velorouten, color = "green", size = 1, alpha = 0.3) +
geom_sf(data = unfaelle_velo_23, color = "red", size = 0.1) +
theme_minimal() +
labs(title = "Comparison of Veloroutes and Mainstreet (Accidents 2023)") +
theme(legend.position = "none")
```{r fig.width = 8, fig.height = 6}
```{r}
ggplot() +
geom_sf(data = strassen_wege, color = "grey", size = 1, alpha = 0.5) +
geom_sf(data = strassen_wege_hvs, color = "blue", size = 1, alpha = 0.3) +
geom_sf(data = velorouten, color = "green", size = 1, alpha = 0.3) +
geom_sf(data = unfaelle_velo_23, color = "red", size = 0.1) +
theme_void() +
labs(title = "Comparison of Veloroutes and Mainstreet (Accidents 2023)") +
theme(legend.position = "none")
```{r fig.width = 8, fig.height = 6}
```{r fig.width=8, fig.height=6}
```{r fig.width=8, fig.height=6}
```{r}
ggplot() +
geom_sf(data = strassen_wege, color = "grey", size = 1, alpha = 0.5) +
geom_sf(data = strassen_wege_hvs, color = "blue", size = 1, alpha = 0.3) +
geom_sf(data = velorouten, color = "green", size = 1, alpha = 0.3) +
geom_sf(data = unfaelle_velo_23, color = "red", size = 0.1) +
theme_void() +
labs(title = "Comparison of Veloroutes and Mainstreet (Accidents 2023)") +
theme(legend.position = "none")
ggplot() +
geom_sf(data = strassen_wege, color = "grey", size = 1, alpha = 0.5) +
geom_sf(data = strassen_wege_hvs, color = "blue", size = 1, alpha = 0.3) +
geom_sf(data = velorouten, color = "green", size = 1, alpha = 0.3) +
geom_sf(data = unfaelle_velo_23, color = "pink", size = 0.1) +
theme_void() +
labs(title = "Comparison of Veloroutes and Mainstreet (Accidents 2023)") +
theme(legend.position = "none")
ggplot() +
geom_sf(data = strassen_wege, color = "grey", size = 1, alpha = 0.5) +
geom_sf(data = strassen_wege_hvs, color = "blue", size = 1, alpha = 0.3) +
geom_sf(data = velorouten, color = "green", size = 1, alpha = 0.3) +
geom_sf(data = unfaelle_velo_23, color = "pink", size = 1) +
theme_void() +
labs(title = "Comparison of Veloroutes and Mainstreet (Accidents 2023)") +
theme(legend.position = "none")
ggplot() +
geom_sf(data = strassen_wege, color = "grey", size = 1, alpha = 0.5) +
geom_sf(data = strassen_wege_hvs, color = "blue", size = 1, alpha = 0.3) +
geom_sf(data = velorouten, color = "purple", size = 1, alpha = 0.3) +
geom_sf(data = unfaelle_velo_23, color = "red", size = 0.1) +
theme_void() +
labs(title = "Comparison of Veloroutes and Mainstreet (Accidents 2023)") +
theme(legend.position = "none")
ggplot() +
geom_sf(data = strassen_wege, color = "grey", size = 1, alpha = 0.5) +
geom_sf(data = strassen_wege_hvs, color = "purple", size = 1, alpha = 0.3) +
geom_sf(data = velorouten, color = "green", size = 1, alpha = 0.3) +
geom_sf(data = unfaelle_velo_23, color = "red", size = 0.1) +
theme_void() +
labs(title = "Comparison of Veloroutes and Mainstreet (Accidents 2023)") +
theme(legend.position = "none")
ggplot() +
geom_sf(data = strassen_wege, color = "grey", size = 1, alpha = 0.5) +
geom_sf(data = strassen_wege_hvs, color = "purple", size = 1, alpha = 0.3) +
geom_sf(data = velorouten, color = "lightgreen", size = 1, alpha = 0.3) +
geom_sf(data = unfaelle_velo_23, color = "red", size = 0.1) +
theme_void() +
labs(title = "Comparison of Veloroutes and Mainstreet (Accidents 2023)") +
theme(legend.position = "none")
ggplot() +
geom_sf(data = strassen_wege, color = "grey", size = 1, alpha = 0.5) +
geom_sf(data = strassen_wege_hvs, color = "purple", size = 1, alpha = 0.3) +
geom_sf(data = velorouten, color = "darkgreen", size = 1, alpha = 0.3) +
geom_sf(data = unfaelle_velo_23, color = "red", size = 0.1) +
theme_void() +
labs(title = "Comparison of Veloroutes and Mainstreet (Accidents 2023)") +
theme(legend.position = "none")
ggplot() +
geom_sf(data = strassen_wege, color = "grey", size = 1, alpha = 0.5) +
geom_sf(data = strassen_wege_hvs, color = "purple", size = 2, alpha = 0.3) +
geom_sf(data = velorouten, color = "darkgreen", size = 2, alpha = 0.3) +
geom_sf(data = unfaelle_velo_23, color = "red", size = 0.1) +
theme_void() +
labs(title = "Comparison of Veloroutes and Mainstreet (Accidents 2023)") +
theme(legend.position = "none")
purple
ggplot() +
geom_sf(data = strassen_wege, color = "grey", size = 1, alpha = 0.5) +
geom_sf(data = strassen_wege_hvs, color = "purple", size = 10, alpha = 0.3) +
geom_sf(data = velorouten, color = "darkgreen", size = 10, alpha = 0.3) +
geom_sf(data = unfaelle_velo_23, color = "red", size = 0.1) +
theme_void() +
labs(title = "Comparison of Veloroutes and Mainstreet (Accidents 2023)") +
theme(legend.position = "none")
